package xyz.funkybit.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b50608051613a6161003e60003960008181611bf101528181611c1a0152611d5b0152613a616000f3fe6080604052600436106101d15760003560e01c806365e17c9d116100f7578063ad3cb1cc11610095578063d1e32f6711610064578063d1e32f671461061a578063e791cb241461062f578063ed53f22a14610645578063f2fde38b1461065b57600080fd5b8063ad3cb1cc14610551578063bcf5a41e1461058f578063c23f001f146105af578063c3bcc71e146105e457600080fd5b806384b0196e116100d157806384b0196e146104ac5780638da5cb5b146104d45780638dc45d9a14610511578063a07581c61461053157600080fd5b806365e17c9d1461043f578063715018a6146104775780637a92db1a1461048c57600080fd5b80633644e5151161016f5780634f1ef2861161013e5780634f1ef286146103e257806352d1902d146103f55780635a91f7431461040a578063600672d91461042a57600080fd5b80633644e5151461037757806347e7ef241461038c5780634a34d434146103ac5780634b023cf8146103c257600080fd5b80631fab7779116101ab5780631fab7779146102f357806324a9b806146103135780632ba81b661461033357806330176c861461035757600080fd5b80630d8e6e2c146102455780631794bb3c146102665780631bd9d2831461028857600080fd5b366102405733600090815260208181526040808320838052909152812080543492906101fe908490612bc1565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b34801561025157600080fd5b50604051600181526020015b60405180910390f35b34801561027257600080fd5b50610286610281366004612bf0565b61067b565b005b34801561029457600080fd5b506102ce6102a3366004612c2c565b6006602052600090815260409020805460018201546002909201546001600160a01b03909116919083565b604080516001600160a01b03909416845260208401929092529082015260600161025d565b3480156102ff57600080fd5b5061028661030e366004612c8f565b61080f565b34801561031f57600080fd5b5061028661032e366004612ce8565b61092a565b34801561033f57600080fd5b5061034960075481565b60405190815260200161025d565b34801561036357600080fd5b50610286610372366004612ce8565b610dc7565b34801561038357600080fd5b50610349611375565b34801561039857600080fd5b506102866103a7366004612d29565b611384565b3480156103b857600080fd5b5061034960035481565b3480156103ce57600080fd5b506102866103dd366004612c2c565b61147e565b6102866103f0366004612eb8565b6114f4565b34801561040157600080fd5b50610349611513565b34801561041657600080fd5b50610286610425366004612c2c565b611530565b34801561043657600080fd5b506102866115a6565b34801561044b57600080fd5b5060025461045f906001600160a01b031681565b6040516001600160a01b03909116815260200161025d565b34801561048357600080fd5b506102866115f7565b34801561049857600080fd5b506102866104a7366004612f05565b61160b565b3480156104b857600080fd5b506104c161167a565b60405161025d9796959493929190612f6e565b3480156104e057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661045f565b34801561051d57600080fd5b5060015461045f906001600160a01b031681565b34801561053d57600080fd5b5061028661054c366004613007565b611726565b34801561055d57600080fd5b50610582604051806040016040528060058152602001640352e302e360dc1b81525081565b60405161025d919061307b565b34801561059b57600080fd5b506102866105aa366004612d29565b611948565b3480156105bb57600080fd5b506103496105ca36600461308e565b600060208181529281526040808220909352908152205481565b3480156105f057600080fd5b5061045f6105ff366004612c2c565b6008602052600090815260409020546001600160a01b031681565b34801561062657600080fd5b50610286611abb565b34801561063b57600080fd5b5061034960045481565b34801561065157600080fd5b5061034960055481565b34801561066757600080fd5b50610286610676366004612c2c565b611aec565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156106c05750825b90506000826001600160401b031660011480156106dc5750303b155b9050811580156106ea575080155b156107085760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561073257845460ff60401b1916600160401b1785555b61073b33611b2a565b610743611b3b565b61078a60405180604001604052806008815260200167199d5b9ade589a5d60c21b815250604051806040016040528060058152602001640302e312e360dc1b815250611b43565b600180546001600160a01b03808b166001600160a01b03199283161790925560028054928a16929091169190911790556007869055831561080557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b60006108518484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b5592505050565b90506001600160a01b038116158061087b5750846001600160a01b0316816001600160a01b031614155b156108c3576040516001600160a01b038616815233907f48722a420abf3b6012bbc8ae63039b01efed350c3aa2f04bceca3f7786b8a7419060200160405180910390a2610923565b3360008181526008602090815260409182902080546001600160a01b0319166001600160a01b038a1690811790915591519182527fdbffa63d3d155ac9a4093de0327cec0b7e2df207b3b7032f884676fec4a790b7910160405180910390a25b5050505050565b6001546001600160a01b0316331461095d5760405162461bcd60e51b8152600401610954906130c1565b60405180910390fd5b600354156109bb5760405162461bcd60e51b815260206004820152602560248201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6044820152646c6261636b60d81b6064820152608401610954565b600160006109cb838501856133d6565b60208101515181515191925014610a345760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b6064820152608401610954565b60005b8160400151518163ffffffff161015610d9d57600082604001518263ffffffff1681518110610a6857610a686134e4565b6020026020010151606001519050600083604001518363ffffffff1681518110610a9457610a946134e4565b602002602001015160000151905060005b84604001518463ffffffff1681518110610ac157610ac16134e4565b602002602001015160200151518163ffffffff161015610b455784604001518463ffffffff1681518110610af757610af76134e4565b6020026020010151602001518163ffffffff1681518110610b1a57610b1a6134e4565b60200260200101516020015183610b3191906134fa565b925080610b3d81613522565b915050610aa5565b5060005b84604001518463ffffffff1681518110610b6557610b656134e4565b602002602001015160400151518163ffffffff161015610d3457600085604001518563ffffffff1681518110610b9d57610b9d6134e4565b6020026020010151604001518263ffffffff1681518110610bc057610bc06134e4565b60200260200101516020015190508084610bda9190613545565b9350600086604001518663ffffffff1681518110610bfa57610bfa6134e4565b6020026020010151604001518363ffffffff1681518110610c1d57610c1d6134e4565b60200260200101516000015161ffff169050600087600001518263ffffffff1681518110610c4d57610c4d6134e4565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a1682529190935290912054909150831115610d1e5760009850806001600160a01b03167ffd9ca98a19582277369a1bd07c1b0d8d47ca8ca730a2ef34c6617c4453c3570a868a602001518563ffffffff1681518110610cd457610cd46134e4565b602090810291909101810151516001600160a01b0380871660009081528084526040808220928d1682529190935291829020549151610d15939289916135a8565b60405180910390a25b5050508080610d2c90613522565b915050610b49565b508115610d885783604001518363ffffffff1681518110610d5757610d576134e4565b6020908102919091010151516040516337f855c760e01b81526001600160a01b039091166004820152602401610954565b50508080610d9590613522565b915050610a37565b508115610dc1578383604051610db49291906135df565b6040519081900390206003555b50505050565b6001546001600160a01b03163314610df15760405162461bcd60e51b8152600401610954906130c1565b600354600003610e375760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b6044820152606401610954565b8181604051610e479291906135df565b604051809103902060035414610eaa5760405162461bcd60e51b815260206004820152602260248201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746044820152610c6d60f31b6064820152608401610954565b6000610eb8828401846133d6565b905060005b8160400151518163ffffffff1610156112b257600082604001518263ffffffff1681518110610eee57610eee6134e4565b602002602001015160000151905060005b83604001518363ffffffff1681518110610f1b57610f1b6134e4565b602002602001015160200151518163ffffffff16101561104957600084604001518463ffffffff1681518110610f5357610f536134e4565b6020026020010151602001518263ffffffff1681518110610f7657610f766134e4565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610fa757610fa76134e4565b6020026020010151602001518463ffffffff1681518110610fca57610fca6134e4565b60200260200101516000015161ffff1681518110610fea57610fea6134e4565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352822080549193508492909161102d908490612bc1565b925050819055505050808061104190613522565b915050610eff565b5060005b83604001518363ffffffff1681518110611069576110696134e4565b602002602001015160400151518163ffffffff16101561120657600084604001518463ffffffff16815181106110a1576110a16134e4565b6020026020010151604001518263ffffffff16815181106110c4576110c46134e4565b60200260200101516020015190506000856000015186604001518663ffffffff16815181106110f5576110f56134e4565b6020026020010151604001518463ffffffff1681518110611118576111186134e4565b60200260200101516000015161ffff1681518110611138576111386134e4565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093529091205490915082116111b2576001600160a01b03808216600090815260208181526040808320938816835292905290812080548492906111a79084906135ef565b909155506111f19050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b6044820152606401610954565b505080806111fe90613522565b91505061104d565b5082604001518263ffffffff1681518110611223576112236134e4565b60200260200101516060015160001461129f5782604001518263ffffffff1681518110611252576112526134e4565b602090810291909101810151606001516002546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091611299908490612bc1565b90915550505b50806112aa81613522565b915050610ebd565b5060005b8160200151518163ffffffff161015611364578151805163ffffffff83169081106112e3576112e36134e4565b60200260200101516001600160a01b03167f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1783602001518363ffffffff1681518110611331576113316134e4565b60200260200101516000015160405161134a9190613602565b60405180910390a28061135c81613522565b9150506112b6565b505060038054600455600090555050565b600061137f611b81565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af11580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd9190613615565b50336000908152602081815260408083206001600160a01b03871684529091528120805484929061142f908490612bc1565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6291015b60405180910390a2505050565b611486611b8b565b6001600160a01b0381166114d25760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610954565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6114fc611be6565b61150582611c8b565b61150f8282611c93565b5050565b600061151d611d50565b50600080516020613a0c83398151915290565b611538611b8b565b6001600160a01b0381166115845760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610954565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b33600081815260086020908152604080832080546001600160a01b0319169055519182527fdbffa63d3d155ac9a4093de0327cec0b7e2df207b3b7032f884676fec4a790b7910160405180910390a2565b6115ff611b8b565b6116096000611d99565b565b611613611b8b565b620151808110156116755760405162461bcd60e51b815260206004820152602660248201527f4e6f7420612076616c696420736f7665726569676e207769746864726177616c6044820152652064656c617960d01b6064820152608401610954565b600755565b600060608082808083816000805160206139ec83398151915280549091501580156116a757506001810154155b6116eb5760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610954565b6116f3611e0a565b6116fb611ecd565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b6001546001600160a01b031633146117505760405162461bcd60e51b8152600401610954906130c1565b600354156117a05760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420626174636820696e2070726f6365737300000000006044820152606401610954565b60005b818110156119365760008383838181106117bf576117bf6134e4565b90506020028101906117d19190613637565b60008181106117e2576117e26134e4565b919091013560f81c905060018111156117fd576117fd61367d565b90506000848484818110611813576118136134e4565b90506020028101906118259190613637565b611833916001908290613693565b81019061184091906136d4565b9050600060018360018111156118585761185861367d565b149050600061186a8360400151611f0c565b801561187b575061187b8383611f6b565b9050808061188e575061188e8385611fff565b156119265781156118c357825160208085015180519181015160408201516080909201516118be949392906121a8565b6118e8565b825160208085015180519181015160408201516080909201516118e894939290612245565b801561192657602080840151516001600160a01b0316600090815260069091526040812080546001600160a01b031916815560018101829055600201555b5050600190920191506117a39050565b506119418282612470565b6005555050565b336000908152600660209081526040808320815160608101835281546001600160a01b031681526001820154938101939093526002015490820181905290910361199b576119968383612505565b505050565b60075481604001516119ad9190612bc1565b4210156119fc5760405162461bcd60e51b815260206004820152601860248201527f5769746864726177616c2064656c6179206e6f74206d657400000000000000006044820152606401610954565b826001600160a01b031681600001516001600160a01b0316148015611a245750818160200151145b15611ab1578060200151600003611a6d57336000818152602081815260408083206001600160a01b038816845290915281205483519092611a6792918483612245565b50611a84565b611a84600033836000015184602001516000612245565b33600090815260066020526040812080546001600160a01b03191681556001810182905560020155505050565b6119968383612505565b6001546001600160a01b03163314611ae55760405162461bcd60e51b8152600401610954906130c1565b6000600355565b611af4611b8b565b6001600160a01b038116611b1e57604051631e4fbdf760e01b815260006004820152602401610954565b611b2781611d99565b50565b611b326125fd565b611b2781612646565b6116096125fd565b611b4b6125fd565b61150f828261264e565b600080600080611b6586866126af565b925092509250611b7582826126fc565b50909150505b92915050565b600061137f6127b5565b33611bbd7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146116095760405163118cdaa760e01b8152336004820152602401610954565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611c6d57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c61600080516020613a0c833981519152546001600160a01b031690565b6001600160a01b031614155b156116095760405163703e46dd60e11b815260040160405180910390fd5b611b27611b8b565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ced575060408051601f3d908101601f19168201909252611cea918101906137ab565b60015b611d1557604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610954565b600080516020613a0c8339815191528114611d4657604051632a87526960e21b815260048101829052602401610954565b6119968383612829565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116095760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060916000805160206139ec83398151915291611e49906137c4565b80601f0160208091040260200160405190810160405280929190818152602001828054611e75906137c4565b8015611ec25780601f10611e9757610100808354040283529160200191611ec2565b820191906000526020600020905b815481529060010190602001808311611ea557829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10380546060916000805160206139ec83398151915291611e49906137c4565b60008151604114611f1f57506000919050565b60005b8251811015611f6257828181518110611f3d57611f3d6134e4565b01602001516001600160f81b03191615611f5a5750600092915050565b600101611f22565b50600192915050565b60208083018051516001600160a01b03908116600090815260068452604080822081516060810183528154909416845260018101549584018690526002015483820152925190920151919290911480611fce57506020810151158015611fce5750825b8015611ff757508360200151602001516001600160a01b031681600001516001600160a01b0316145b949350505050565b6000806120c56040518060800160405280604281526020016139aa60429139805160209182012086820151805192015190919060018760018111156120465761204661367d565b146120595787602001516040015161205c565b60005b6020808a0151606001516040516120aa9695949392019485526001600160a01b03938416602086015291909216604084015260608301919091526001600160401b0316608082015260a00190565b6040516020818303038152906040528051906020012061287f565b905060006120d7828660400151611b55565b90506001600160a01b038116158061213057506020850151516001600160a01b038281169116148015906121305750602080860151516001600160a01b0390811660009081526008909252604090912054828216911614155b1561219d57602080860151805187519282015160409283015192516001600160a01b03909216937fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b29361218a939192916000908190613820565b60405180910390a2600092505050611b7b565b506001949350505050565b6001600160a01b038085166000908152602081815260408083209387168352929052205480821061222257846001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2878686856001604051612215959493929190613820565b60405180910390a261223d565b61223d8686868487116122355786612237565b845b86612245565b505050505050565b6001600160a01b0380851660009081526020818152604080832093871683529290522054808311156122b357846001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2878686856001604051612215959493929190613820565b6001600160a01b03808616600090815260208181526040808320938816835292905290812080548592906122e89084906135ef565b90915550506002546001600160a01b0390811660009081526020818152604080832093881683529290529081208054849290612325908490612bc1565b90915550506001600160a01b03841661237d576001600160a01b0385166108fc61234f84866135ef565b6040518115909202916000818181858888f19350505050158015612377573d6000803e3d6000fd5b5061240a565b836001600160a01b03811663a9059cbb8761239886886135ef565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190613615565b50505b604080516001600160401b03881681526001600160a01b03868116602083015291810185905260608101849052908616907fe800413c05f850178bea4488b9d87a728d51ad52113ac85005006eb65bf1e2339060800160405180910390a2505050505050565b6040805160008082526020820190925260005b838110156124f557600085858381811061249f5761249f6134e4565b90506020028101906124b19190613637565b6040516124bf9291906135df565b60405190819003812091506124da9084908390602001613864565b60408051601f19818403018152919052925050600101612483565b5080516020909101209392505050565b336000908152602081815260408083206001600160a01b03861684529091529020548082111561256e5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610954565b604080516060810182526001600160a01b0385811680835260208084018781524285870190815233600081815260068552889020965187546001600160a01b031916961695909517865590516001860155516002909401939093558351908152918201859052917f04c56a409d50971e45c5a2d96e5d557d2b0f1d66d40f14b141e4c958b0f39b329101611471565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661160957604051631afcd79f60e31b815260040160405180910390fd5b611af46125fd565b6126566125fd565b6000805160206139ec8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10261269084826138ce565b506003810161269f83826138ce565b5060008082556001909101555050565b600080600083516041036126e95760208401516040850151606086015160001a6126db888285856128ac565b9550955095505050506126f5565b50508151600091506002905b9250925092565b60008260038111156127105761271061367d565b03612719575050565b600182600381111561272d5761272d61367d565b0361274b5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561275f5761275f61367d565b036127805760405163fce698f760e01b815260048101829052602401610954565b60038260038111156127945761279461367d565b0361150f576040516335e2f38360e21b815260048101829052602401610954565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6127e061297b565b6127e86129e5565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61283282612a29565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612877576119968282612a8e565b61150f612b04565b6000611b7b61288c611b81565b8360405161190160f01b8152600281019290925260228201526042902090565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156128e75750600091506003905082612971565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561293b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661296757506000925060019150829050612971565b9250600091508190505b9450945094915050565b60006000805160206139ec83398151915281612995611e0a565b8051909150156129ad57805160209091012092915050565b815480156129bc579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b60006000805160206139ec833981519152816129ff611ecd565b805190915015612a1757805160209091012092915050565b600182015480156129bc579392505050565b806001600160a01b03163b600003612a5f57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610954565b600080516020613a0c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612aab919061398d565b600060405180830381855af49150503d8060008114612ae6576040519150601f19603f3d011682016040523d82523d6000602084013e612aeb565b606091505b5091509150612afb858383612b23565b95945050505050565b34156116095760405163b398979f60e01b815260040160405180910390fd5b606082612b3857612b3382612b82565b612b7b565b8151158015612b4f57506001600160a01b0384163b155b15612b7857604051639996b31560e01b81526001600160a01b0385166004820152602401610954565b50805b9392505050565b805115612b925780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611b7b57611b7b612bab565b80356001600160a01b0381168114612beb57600080fd5b919050565b600080600060608486031215612c0557600080fd5b612c0e84612bd4565b9250612c1c60208501612bd4565b9150604084013590509250925092565b600060208284031215612c3e57600080fd5b612b7b82612bd4565b60008083601f840112612c5957600080fd5b5081356001600160401b03811115612c7057600080fd5b602083019150836020828501011115612c8857600080fd5b9250929050565b60008060008060608587031215612ca557600080fd5b612cae85612bd4565b93506020850135925060408501356001600160401b03811115612cd057600080fd5b612cdc87828801612c47565b95989497509550505050565b60008060208385031215612cfb57600080fd5b82356001600160401b03811115612d1157600080fd5b612d1d85828601612c47565b90969095509350505050565b60008060408385031215612d3c57600080fd5b612d4583612bd4565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b0381118282101715612d8b57612d8b612d53565b60405290565b604080519081016001600160401b0381118282101715612d8b57612d8b612d53565b604051608081016001600160401b0381118282101715612d8b57612d8b612d53565b604051606081016001600160401b0381118282101715612d8b57612d8b612d53565b60405160a081016001600160401b0381118282101715612d8b57612d8b612d53565b604051601f8201601f191681016001600160401b0381118282101715612e4157612e41612d53565b604052919050565b600082601f830112612e5a57600080fd5b81356001600160401b03811115612e7357612e73612d53565b612e86601f8201601f1916602001612e19565b818152846020838601011115612e9b57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612ecb57600080fd5b612ed483612bd4565b915060208301356001600160401b03811115612eef57600080fd5b612efb85828601612e49565b9150509250929050565b600060208284031215612f1757600080fd5b5035919050565b60005b83811015612f39578181015183820152602001612f21565b50506000910152565b60008151808452612f5a816020860160208601612f1e565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e06020840152612f8f60e084018a612f42565b8381036040850152612fa1818a612f42565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b81811015612ff557835183529284019291840191600101612fd9565b50909c9b505050505050505050505050565b6000806020838503121561301a57600080fd5b82356001600160401b038082111561303157600080fd5b818501915085601f83011261304557600080fd5b81358181111561305457600080fd5b8660208260051b850101111561306957600080fd5b60209290920196919550909350505050565b602081526000612b7b6020830184612f42565b600080604083850312156130a157600080fd5b6130aa83612bd4565b91506130b860208401612bd4565b90509250929050565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60006001600160401b0382111561311157613111612d53565b5060051b60200190565b600082601f83011261312c57600080fd5b8135602061314161313c836130f8565b612e19565b828152600592831b850182019282820191908785111561316057600080fd5b8387015b858110156132305780356001600160401b03808211156131845760008081fd5b90890190818b03601f190187131561319c5760008081fd5b6131a4612d69565b87830135828111156131b65760008081fd5b8084019350508b603f8401126131ce57600091508182fd5b87830135915060406131e261313c846130f8565b83815292861b8401810192898101908e8511156131ff5760008081fd5b948201945b8486101561321d5785358252948a0194908a0190613204565b8352505086525050928401928401613164565b5090979650505050505050565b600082601f83011261324e57600080fd5b8135602061325e61313c836130f8565b82815260069290921b8401810191818101908684111561327d57600080fd5b8286015b848110156132cd576040818903121561329a5760008081fd5b6132a2612d91565b813561ffff811681146132b55760008081fd5b81528185013585820152835291830191604001613281565b509695505050505050565b600082601f8301126132e957600080fd5b813560206132f961313c836130f8565b82815260059290921b8401810191818101908684111561331857600080fd5b8286015b848110156132cd5780356001600160401b038082111561333c5760008081fd5b908801906080828b03601f19018113156133565760008081fd5b61335e612db3565b613369888501612bd4565b81526040808501358481111561337f5760008081fd5b61338d8e8b8389010161323d565b8a84015250606080860135858111156133a65760008081fd5b6133b48f8c838a010161323d565b928401929092529490920135938101939093525050835291830191830161331c565b600060208083850312156133e957600080fd5b82356001600160401b038082111561340057600080fd5b908401906060828703121561341457600080fd5b61341c612dd5565b82358281111561342b57600080fd5b8301601f8101881361343c57600080fd5b803561344a61313c826130f8565b81815260059190911b8201860190868101908a83111561346957600080fd5b928701925b8284101561348e5761347f84612bd4565b8252928701929087019061346e565b845250505082840135828111156134a457600080fd5b6134b08882860161311b565b858301525060408301359350818411156134c957600080fd5b6134d5878585016132d8565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b808201828112600083128015821682158216171561351a5761351a612bab565b505092915050565b600063ffffffff80831681810361353b5761353b612bab565b6001019392505050565b818103600083128015838313168383128216171561356557613565612bab565b5092915050565b60008151808452602080850194506020840160005b8381101561359d57815187529582019590820190600101613581565b509495945050505050565b6001600160a01b03851681526080602082018190526000906135cc9083018661356c565b6040830194909452506060015292915050565b8183823760009101908152919050565b81810381811115611b7b57611b7b612bab565b602081526000612b7b602083018461356c565b60006020828403121561362757600080fd5b81518015158114612b7b57600080fd5b6000808335601e1984360301811261364e57600080fd5b8301803591506001600160401b0382111561366857600080fd5b602001915036819003821315612c8857600080fd5b634e487b7160e01b600052602160045260246000fd5b600080858511156136a357600080fd5b838611156136b057600080fd5b5050820193919092039150565b80356001600160401b0381168114612beb57600080fd5b6000602082840312156136e657600080fd5b81356001600160401b03808211156136fd57600080fd5b9083019081850360e081121561371257600080fd5b61371a612dd5565b613723846136bd565b815260a0601f198301121561373757600080fd5b61373f612df7565b915061374d60208501612bd4565b825261375b60408501612bd4565b602083015260608401356040830152613776608085016136bd565b606083015260a0840135608083015281602082015260c084013591508282111561379f57600080fd5b6134d587838601612e49565b6000602082840312156137bd57600080fd5b5051919050565b600181811c908216806137d857607f821691505b6020821081036137f857634e487b7160e01b600052602260045260246000fd5b50919050565b6002811061381c57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160401b03861681526001600160a01b0385166020820152604081018490526060810183905260a0810161385a60808301846137fe565b9695505050505050565b60008351613876818460208801612f1e565b9190910191825250602001919050565b601f821115611996576000816000526020600020601f850160051c810160208610156138af5750805b601f850160051c820191505b8181101561223d578281556001016138bb565b81516001600160401b038111156138e7576138e7612d53565b6138fb816138f584546137c4565b84613886565b602080601f83116001811461393057600084156139185750858301515b600019600386901b1c1916600185901b17855561223d565b600085815260208120601f198616915b8281101561395f57888601518255948401946001909101908401613940565b508582101561397d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161399f818460208701612f1e565b919091019291505056fe576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220b3dd6a6848c72e5ce7e415b99dfb19911d6adf132f16888fcc653d0f741b9d7464736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LASTSETTLEMENTBATCHHASH = "lastSettlementBatchHash";

    public static final String FUNC_LASTWITHDRAWALBATCHHASH = "lastWithdrawalBatchHash";

    public static final String FUNC_LINKSIGNER = "linkSigner";

    public static final String FUNC_LINKEDSIGNERS = "linkedSigners";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_REMOVELINKEDSIGNER = "removeLinkedSigner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSOVEREIGNWITHDRAWALDELAY = "setSovereignWithdrawalDelay";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SOVEREIGNWITHDRAWAL = "sovereignWithdrawal";

    public static final String FUNC_SOVEREIGNWITHDRAWALDELAY = "sovereignWithdrawalDelay";

    public static final String FUNC_SOVEREIGNWITHDRAWALS = "sovereignWithdrawals";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITWITHDRAWALS = "submitWithdrawals";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event LINKSIGNERFAILED_EVENT = new Event("LinkSignerFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event LINKEDSIGNER_EVENT = new Event("LinkedSigner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALFAILED_EVENT = new Event("WithdrawalFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event WITHDRAWALREQUESTED_EVENT = new Event("WithdrawalRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount, BigInteger _sovereignWithdrawalDelay) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount), 
                new org.web3j.abi.datatypes.generated.Uint256(_sovereignWithdrawalDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> lastSettlementBatchHash() {
        final Function function = new Function(FUNC_LASTSETTLEMENTBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> lastWithdrawalBatchHash() {
        final Function function = new Function(FUNC_LASTWITHDRAWALBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> linkSigner(String _linkedSigner, byte[] _digest, byte[] _signature) {
        final Function function = new Function(
                FUNC_LINKSIGNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _linkedSigner), 
                new org.web3j.abi.datatypes.generated.Bytes32(_digest), 
                new org.web3j.abi.datatypes.DynamicBytes(_signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> linkedSigners(String param0) {
        final Function function = new Function(FUNC_LINKEDSIGNERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeLinkedSigner() {
        final Function function = new Function(
                FUNC_REMOVELINKEDSIGNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSovereignWithdrawalDelay(BigInteger _sovereignWithdrawalDelay) {
        final Function function = new Function(
                FUNC_SETSOVEREIGNWITHDRAWALDELAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sovereignWithdrawalDelay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sovereignWithdrawal(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_SOVEREIGNWITHDRAWAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> sovereignWithdrawalDelay() {
        final Function function = new Function(FUNC_SOVEREIGNWITHDRAWALDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> sovereignWithdrawals(String param0) {
        final Function function = new Function(FUNC_SOVEREIGNWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitWithdrawals(List<byte[]> withdrawals) {
        final Function function = new Function(
                FUNC_SUBMITWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(withdrawals, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<LinkSignerFailedEventResponse> getLinkSignerFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LINKSIGNERFAILED_EVENT, transactionReceipt);
        ArrayList<LinkSignerFailedEventResponse> responses = new ArrayList<LinkSignerFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LinkSignerFailedEventResponse typedResponse = new LinkSignerFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.linkedSigner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LinkSignerFailedEventResponse getLinkSignerFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LINKSIGNERFAILED_EVENT, log);
        LinkSignerFailedEventResponse typedResponse = new LinkSignerFailedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.linkedSigner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<LinkSignerFailedEventResponse> linkSignerFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLinkSignerFailedEventFromLog(log));
    }

    public Flowable<LinkSignerFailedEventResponse> linkSignerFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LINKSIGNERFAILED_EVENT));
        return linkSignerFailedEventFlowable(filter);
    }

    public static List<LinkedSignerEventResponse> getLinkedSignerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(LINKEDSIGNER_EVENT, transactionReceipt);
        ArrayList<LinkedSignerEventResponse> responses = new ArrayList<LinkedSignerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LinkedSignerEventResponse typedResponse = new LinkedSignerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.linkedSigner = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static LinkedSignerEventResponse getLinkedSignerEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(LINKEDSIGNER_EVENT, log);
        LinkedSignerEventResponse typedResponse = new LinkedSignerEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.linkedSigner = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<LinkedSignerEventResponse> linkedSignerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getLinkedSignerEventFromLog(log));
    }

    public Flowable<LinkedSignerEventResponse> linkedSignerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LINKEDSIGNER_EVENT));
        return linkedSignerEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public static List<WithdrawalFailedEventResponse> getWithdrawalFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, transactionReceipt);
        ArrayList<WithdrawalFailedEventResponse> responses = new ArrayList<WithdrawalFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalFailedEventResponse getWithdrawalFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, log);
        WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalFailedEventFromLog(log));
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFAILED_EVENT));
        return withdrawalFailedEventFlowable(filter);
    }

    public static List<WithdrawalRequestedEventResponse> getWithdrawalRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALREQUESTED_EVENT, transactionReceipt);
        ArrayList<WithdrawalRequestedEventResponse> responses = new ArrayList<WithdrawalRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalRequestedEventResponse typedResponse = new WithdrawalRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalRequestedEventResponse getWithdrawalRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALREQUESTED_EVENT, log);
        WithdrawalRequestedEventResponse typedResponse = new WithdrawalRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalRequestedEventResponse> withdrawalRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalRequestedEventFromLog(log));
    }

    public Flowable<WithdrawalRequestedEventResponse> withdrawalRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALREQUESTED_EVENT));
        return withdrawalRequestedEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class LinkSignerFailedEventResponse extends BaseEventResponse {
        public String sender;

        public String linkedSigner;
    }

    public static class LinkedSignerEventResponse extends BaseEventResponse {
        public String sender;

        public String linkedSigner;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public String token;

        public List<byte[]> tradeHashes;

        public BigInteger requestedAmount;

        public BigInteger balance;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger fee;
    }

    public static class WithdrawalFailedEventResponse extends BaseEventResponse {
        public String _address;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger balance;

        public BigInteger errorCode;
    }

    public static class WithdrawalRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }
}
