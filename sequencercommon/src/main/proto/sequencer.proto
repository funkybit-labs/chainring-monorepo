syntax = "proto3";
package sequencer;
import "bignum.proto";
import "order.proto";
import "market.proto";
import "balance.proto";
import "checkpoint.proto";
import "trade.proto";

option java_multiple_files = true;
option java_package = "xyz.funkybit.sequencer.proto";
option java_outer_classname = "SequencerSchema";

message OrderChanged {
  uint64 guid = 1;
  OrderDisposition disposition = 2;
  optional IntegerValue newQuantity = 3;
}

message OrderChangeRejected {
  enum Reason {
    None = 0;
    DoesNotExist = 1;
    NotForWallet = 2;
  }
  uint64 guid = 1;
  Reason reason = 2;
}

message BalanceChange {
  uint64 wallet = 1;
  string asset = 2;
  IntegerValue delta = 3;
}

message LimitsUpdate {
  uint64 wallet = 1;
  string marketId = 2;
  IntegerValue base = 3;
  IntegerValue quote = 4;
}

message MarketCreated {
  string marketId = 1;
  DecimalValue tickSize = 2;
  uint32 baseDecimals = 3;
  uint32 quoteDecimals = 4;
  optional IntegerValue minFee = 6;
}

message FeeRates {
  uint64 maker = 1;
  uint64 taker = 2;
}

message BidOfferState {
  int32 maxOfferIx = 1;
  int32 minBidIx = 2;
  int32 bestBidIx = 3;
  int32 bestOfferIx = 4;
}

message SequencerRequest {
  enum Type {
    AddMarket = 0;
    ApplyOrderBatch = 1;
    ApplyBalanceBatch = 2;
    Reset = 3;
    GetState = 4;
    SetFeeRates = 5;
    SetWithdrawalFees = 6;
    SetMarketMinFees = 7;
    ApplyBackToBackOrder = 8;
    Unparseable = 9;
  }
  string guid = 1;
  Type type = 2;
  optional Market addMarket = 3;
  optional OrderBatch orderBatch = 4;
  optional BalanceBatch balanceBatch = 5;
  optional FeeRates feeRates = 6;
  repeated WithdrawalFee withdrawalFees = 7;
  repeated MarketMinFee marketMinFees = 8;
  optional BackToBackOrder backToBackOrder = 9;
}

enum SequencerError {
  None = 0;
  UnknownRequest = 1;
  MarketExists = 2;
  UnknownMarket = 3;
  ExceedsLimit = 4;
  InvalidFeeRate = 5;
  InvalidWithdrawalFee = 6;
  InvalidMarketMinFee = 7;
  InvalidBackToBackOrder = 8;
}

message StateDump {
  repeated BalancesCheckpoint.Balance balances = 1;
  repeated MarketCheckpoint markets = 2;
  FeeRates feeRates = 3;
  repeated WithdrawalFee withdrawalFees = 4;
}

message SequencerResponse {
  uint64 sequence = 1;
  string guid = 2;
  uint64 processingTime = 3;
  optional SequencerError error = 4;
  repeated OrderChanged ordersChanged = 5;
  repeated TradeCreated tradesCreated = 6;
  repeated BalanceChange balancesChanged = 7;
  repeated MarketCreated marketsCreated = 8;
  repeated OrderChangeRejected ordersChangeRejected = 9;
  optional StateDump stateDump = 10;
  optional FeeRates feeRatesSet = 11;
  optional BidOfferState bidOfferState = 12;
  repeated WithdrawalCreated withdrawalsCreated = 13;
  repeated WithdrawalFee withdrawalFeesSet = 14;
  repeated MarketMinFee marketMinFeesSet = 15;
  uint64 createdAt = 16;
  repeated LimitsUpdate limitsUpdated = 17;
}

message Sequenced {
  string guid = 1;
  uint64 index = 2;
}
