syntax = "proto3";
package sequencer;
import "balance.proto";
import "order.proto";
import "market.proto";
import "authorization.proto";
import "sequencer.proto";
import "checkpoint.proto";

option java_multiple_files = true;
option java_package = "xyz.funkybit.sequencer.proto";
option java_outer_classname = "GatewaySchema";

message GatewayResponse {
  bool success = 1;
  uint64 processingTime = 2;
  optional SequencerResponse sequencerResponse = 3;
}

message ResetRequest {
  string guid = 1;
}

message GetStateRequest {
  string guid = 1;
}

message SetFeeRatesRequest {
  string guid = 1;
  FeeRates feeRates = 2;
}

message AuthorizeWalletRequest {
  string guid = 1;
  Authorization authorization = 2;
}

message SetWithdrawalFeesRequest {
  string guid = 1;
  repeated WithdrawalFee withdrawalFees = 2;
}

message SetMarketMinFeesRequest {
  string guid = 1;
  repeated MarketMinFee marketMinFees = 2;
}

message BackToBackOrderRequest {
  string guid = 1;
  BackToBackOrder order = 2;
}

service Gateway {
  rpc AddMarket (Market) returns (GatewayResponse);
  rpc SetFeeRates (SetFeeRatesRequest) returns (GatewayResponse);
  rpc ApplyBalanceBatch (BalanceBatch) returns (GatewayResponse);
  rpc ApplyOrderBatch (OrderBatch) returns (GatewayResponse);
  rpc Reset (ResetRequest) returns (GatewayResponse);
  rpc GetState (GetStateRequest) returns (GatewayResponse);
  rpc SetWithdrawalFees (SetWithdrawalFeesRequest) returns (GatewayResponse);
  rpc SetMarketMinFees (SetMarketMinFeesRequest) returns (GatewayResponse);
  rpc ApplyBackToBackOrder (BackToBackOrderRequest) returns (GatewayResponse);
  rpc AuthorizeWallet (AuthorizeWalletRequest) returns (GatewayResponse);
}
